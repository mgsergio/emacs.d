* Emacs Config
** Prelude
#+BEGIN_SRC emacs-lisp
  (setf inhibit-startup-screen t
        ring-bell-function 'ignore
        visible-bell nil
        make-backup-files nil)

  (set-default 'indent-tabs-mode nil)

  (setf help-window-select t)

  (if (display-graphic-p)
      (progn
        (scroll-bar-mode -1)
        (tool-bar-mode -1)
        (set-fringe-mode 15)))
  (menu-bar-mode -1)
  (global-hl-line-mode 1)

  (setf debug-on-error t)
#+END_SRC
** Hooks
#+BEGIN_SRC emacs-lisp
  (add-hook 'before-save-hook 'delete-trailing-whitespace)
#+END_SRC
** Interface
*** Themes
#+BEGIN_SRC emacs-lisp
  (use-package solarized-theme)
  ;; (use-package nord-theme)
  (add-hook 'after-init-hook
            (lambda ()
              (load-theme (if (display-graphic-p)
                              'solarized-selenized-dark
                            'solarized-gruvbox-dark))))
#+END_SRC
*** Etc
#+BEGIN_SRC emacs-lisp
  (use-package zoom
    :config (zoom-mode 1))

  (use-package writeroom-mode
    :config
    (setf writeroom-width 120
          writeroom-mode-line t
          ;; writeroom-header-line t
          writeroom-maximize-window nil
          writeroom-global-effects (remq 'writeroom-set-fullscreen
                                         writeroom-global-effects)
          writeroom-major-modes '(text-mode prog-mode))
    (global-writeroom-mode))

  (use-package which-key
    :config (which-key-mode))

  (use-package rainbow-delimiters
    :config (add-hook 'prog-mode-hook #'rainbow-delimiters-mode))
#+END_SRC
*** Completion/Nerrowing
#+BEGIN_SRC emacs-lisp
  (use-package smex
    :commands (smex smex-initialize))

  ;; TODO: Also setup helm and try it later.
  (use-package counsel
    :config (ivy-mode 1)
    :bind (("C-s" . 'swiper-isearch)
           ("M-x" . 'counsel-M-x)
           ("M-y" . 'counsel-yank-pop)
           ("C-x C-f" . 'counsel-find-file)
           ("C-x b" . 'ivy-switch-buffer)
           ("C-c f j" . 'counsel-file-jump)))
#+END_SRC
** Programming
*** Formatting
#+BEGIN_SRC emacs-lisp
  ;; An alternative package: https://github.com/lassik/emacs-format-all-the-code
  (use-package apheleia
    :config
    (setf (alist-get 'isort apheleia-formatters)
          '("isort" "--stdout" "-")
          (alist-get 'python-mode apheleia-mode-alist)
          '(isort black))
    (apheleia-global-mode 1))
#+END_SRC
*** Flycheck
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :config (global-flycheck-mode))
#+END_SRC
*** LSP
#+BEGIN_SRC emacs-lisp
  ;; TODO: try (use-package eglot)
  ;; TODO: lsp-mode overrides flycheck checkers by default so no next checker is set
  ;;       after ls. Wich is kinda annoying for python for instance.
  (use-package lsp-mode
    :init
    (setf lsp-keymap-prefix "C-c l")
    (when (eq system-type 'darwin)
      (setf lsp-clients-typescript-npm-location "/opt/homebrew/bin/npm"))
    :hook (((typescript-mode js-mode) . lsp-deferred)
           ;; (python-mode . lsp-deferred)
           ;; which-key integration
           (lsp-mode . lsp-enable-which-key-integration))
    :commands (lsp lsp-deferred))
  (use-package lsp-ui)
  (use-package lsp-ivy)
#+END_SRC
*** Languages
**** Python
#+BEGIN_SRC emacs-lisp
  (use-package pyvenv)
#+END_SRC
**** Typescript
#+BEGIN_SRC emacs-lisp
  (use-package typescript-mode
    :mode "\\.tsx?\\'")
#+END_SRC
**** Web
#+BEGIN_SRC emacs-lisp
  (use-package web-mode
    :mode (("\\.html?\\'" . web-mode)
           ;;  ("\\.phtml\\'" . web-mode)
           ;; ("\\.tpl\\.php\\'" . web-mode)
           ;; ("\\.[agj]sp\\'" . web-mode)
           ;; ("\\.as[cp]x\\'" . web-mode)
           ;; ("\\.erb\\'" . web-mode)
           ;; ("\\.mustache\\'" . web-mode)
           ;; ("\\.djhtml\\'" . web-mode)
           ))

  (use-package pug-mode
    :mode "\\.pug$")
#+END_SRC
*** VCS
#+BEGIN_SRC emacs-lisp
  (use-package vc-fossil
    ;; Keep from loading unnecessarily at startup.
    :defer t
    ;; This allows VC to load vc-fossil when needed.
    :init (add-to-list 'vc-handled-backends 'Fossil t))

  (use-package magit
    :config
    (with-eval-after-load 'project
      ;; Make [m] magit available when switching projects.
      (require 'magit-extras)))
#+END_SRC
*** Docker
#+BEGIN_SRC emacs-lisp
  (use-package docker
    :bind ("C-c d" . docker))

  (use-package docker-tramp
    :config (setf docker-tramp-use-names t))
#+END_SRC
** Evil
#+BEGIN_SRC emacs-lisp
  (use-package evil
    :init
    (setf evil-split-window-below t
          evil-vsplit-window-right t
          evil-want-C-u-scroll t
          evil-want-keybinding nil
          evil-undo-system 'undo-redo)
    :config
    (evil-mode 1))

  (use-package evil-collection
    :after evil
    :config
    (evil-collection-init))
#+END_SRC

** Keys
;; --------
;; Search:
;;  <prefix> j g . git grep
;;  <prefix> j r . rg
;;  <prefix> j a . ag
;;  counsel-ack
;;  occur
;;  multi-occur
;;
;; --------
;; Toggle:
;;  writeroom
;;  flycheck
;;  zoom
;;  evil
;;  whitespace
;;  lsp/eglot?
;;  TreeMacs
;;
;; --------
;; Moving
;;  paragraphs
;;  s-exp
;;  functions
;;
;; --------
;; Jumps
;;  definition
;;  search for a symbol by name
;;  bookmark?
;;
;; --------
;; C-` Jump to terminal and back to the buffer (create term if not exists)
;;
;; --------
;; etc:
;;  ivy-resume
;;
;; --------
;; lsp bindings


#+BEGIN_SRC emacs-lisp
  (unbind-key "C-z" global-map)

  (defvar custom-keymap (make-sparse-keymap))
  (require 'bind-key) ;; bind-key is a part of use-package.

  (bind-keys :map custom-keymap
             ("s a" . counsel-ag)
             ("s r" . counsel-rg)
             ("t w" . writeroom-mode)
             ("t W" . whitespace-mode)
             ("t c" . flycheck-mode)
             ("t z" . zoom-mode)
             ("M-r" . ivy-resume)
             ("s-r" . ivy-resume))

  (bind-key "s-p" custom-keymap)
  (bind-key "M-p" custom-keymap)
#+END_SRC
*** Stats
#+BEGIN_SRC emacs-lisp
  (use-package keyfreq
    :config
    (keyfreq-mode 1)
    (keyfreq-autosave-mode 1))
#+END_SRC

* Maybe/Try [0/2]
- [ ] TODO: (desktop-save-mode 1)
- [-] Wanted packages/features: [2/12]
  - [ ] Rename both file and buffer
  - [X] helm/swiper
  - [ ] multiple-cursors
  - [ ] mode-line?
  - [ ] window-management
  - [ ] hydra?
  - [ ] grow/shrink regions?
  - [ ] tree-sitter
  - [ ] ace-jump ace-* ?
  - [X] smartparent
  - [ ] expand-region
  - [ ] copany-mode
