* Preferences
#+STARTUP: content
* Emacs Config
** Prelude
#+BEGIN_SRC emacs-lisp
  (setf inhibit-startup-screen t
        ring-bell-function 'ignore
        visible-bell nil
        make-backup-files nil)

  (set-default 'indent-tabs-mode nil)

  (setf help-window-select t)

  (if (display-graphic-p)
      (progn
        (scroll-bar-mode -1)
        (tool-bar-mode -1)
        (set-fringe-mode 15)))
  (menu-bar-mode -1)
  (global-hl-line-mode 1)

  (setf debug-on-error t)
#+END_SRC
** Hooks
#+BEGIN_SRC emacs-lisp
  (add-hook 'before-save-hook 'delete-trailing-whitespace)
#+END_SRC
** Interface
*** Themes
#+BEGIN_SRC emacs-lisp
  (use-package solarized-theme)
  ;; (use-package nord-theme)
  (add-hook 'after-init-hook
            (lambda ()
              (load-theme (if (display-graphic-p)
                              'solarized-selenized-dark
                            'solarized-gruvbox-dark))))
#+END_SRC
*** Etc
#+BEGIN_SRC emacs-lisp
  (use-package zoom
    :config (zoom-mode 1))

  (use-package writeroom-mode
    :config
    (setf writeroom-width 120
          writeroom-mode-line t
          ;; writeroom-header-line t
          writeroom-maximize-window nil
          writeroom-global-effects (remq 'writeroom-set-fullscreen
                                         writeroom-global-effects)
          writeroom-major-modes '(text-mode prog-mode))
    (global-writeroom-mode))

  (use-package which-key
    :config (which-key-mode))

  (use-package rainbow-delimiters
    :config (add-hook 'prog-mode-hook #'rainbow-delimiters-mode))

  (use-package embark
    :ensure t

    :bind
    (("C-." . embark-act)         ;; pick some comfortable binding
     ("C-;" . embark-dwim)        ;; good alternative: M-.
     ("C-h B" . embark-bindings)) ;; alternative for `describe-bindings'

    :init

    ;; Optionally replace the key help with a completing-read interface
    ;; (setq prefix-help-command #'embark-prefix-help-command)

    ;; Show the Embark target at point via Eldoc. You may adjust the
    ;; Eldoc strategy, if you want to see the documentation from
    ;; multiple providers. Beware that using this can be a little
    ;; jarring since the message shown in the minibuffer can be more
    ;; than one line, causing the modeline to move up and down:

    ;; (add-hook 'eldoc-documentation-functions #'embark-eldoc-first-target)
    ;; (setq eldoc-documentation-strategy #'eldoc-documentation-compose-eagerly)

    ;; Add Embark to the mouse context menu. Also enable `context-menu-mode'.
    ;; (context-menu-mode 1)
    ;; (add-hook 'context-menu-functions #'embark-context-menu 100)

    :config

    ;; Hide the mode line of the Embark live/completions buffers
    (add-to-list 'display-buffer-alist
                 '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                   nil
                   (window-parameters (mode-line-format . none)))))

  ;; Consult users will also want the embark-consult package.
  (use-package embark-consult
    :ensure t ; only need to install it, embark loads it after consult if found
    :hook
    (embark-collect-mode . consult-preview-at-point-mode))
#+END_SRC
*** Completion/Narrowing
#+BEGIN_SRC emacs-lisp
  ;; Example configuration for Consult
  (use-package consult
    ;; Replace bindings. Lazily loaded by `use-package'.
    :bind (;; C-c bindings in `mode-specific-map'
           ;; ("C-c M-x" . consult-mode-command)
           ;; ("C-c h" . consult-history)
           ;; ("C-c k" . consult-kmacro)
           ;; ("C-c m" . consult-man)
           ;; ("C-c i" . consult-info)
           ([remap Info-search] . consult-info)

           ;; C-x bindings in `ctl-x-map'
           ("C-x M-:" . consult-complex-command)     ;; orig. repeat-complex-command
           ("C-x b" . consult-buffer)                ;; orig. switch-to-buffer
           ("C-x 4 b" . consult-buffer-other-window) ;; orig. switch-to-buffer-other-window
           ("C-x 5 b" . consult-buffer-other-frame)  ;; orig. switch-to-buffer-other-frame
           ("C-x t b" . consult-buffer-other-tab)    ;; orig. switch-to-buffer-other-tab
           ("C-x r b" . consult-bookmark)            ;; orig. bookmark-jump
           ("C-x p b" . consult-project-buffer)      ;; orig. project-switch-to-buffer

           ;; Custom M-# bindings for fast register access
           ;; ("M-#" . consult-register-load)
           ;; ("M-'" . consult-register-store)          ;; orig. abbrev-prefix-mark (unrelated)
           ;; ("C-M-#" . consult-register)

           ;; Other custom bindings
           ("M-y" . consult-yank-pop)                ;; orig. yank-pop

           ;; M-g bindings in `goto-map'
           ;; ("M-g e" . consult-compile-error)
           ;; ("M-g f" . consult-flymake)               ;; Alternative: consult-flycheck
           ("M-g g" . consult-goto-line)             ;; orig. goto-line
           ;; ("M-g M-g" . consult-goto-line)           ;; orig. goto-line
           ;; ("M-g o" . consult-outline)               ;; Alternative: consult-org-heading
           ;; ("M-g m" . consult-mark)
           ;; ("M-g k" . consult-global-mark)
           ("M-g i" . consult-imenu)
           ("M-g I" . consult-imenu-multi)

           ;; M-s bindings in `search-map'
           ;; ("M-s d" . consult-find)                  ;; Alternative: consult-fd
           ;; ("M-s c" . consult-locate)
           ("M-s g" . consult-grep)
           ("M-s G" . consult-git-grep)
           ("M-s r" . consult-ripgrep)
           ("M-s l" . consult-line)
           ("M-s L" . consult-line-multi)
           ;; ("M-s k" . consult-keep-lines)
           ;; ("M-s u" . consult-focus-lines)

           ;; Isearch integration
           ;; ("M-s e" . consult-isearch-history)
           ;; :map isearch-mode-map
           ;; ("M-e" . consult-isearch-history)         ;; orig. isearch-edit-string
           ;; ("M-s e" . consult-isearch-history)       ;; orig. isearch-edit-string
           ;; ("M-s l" . consult-line)                  ;; needed by consult-line to detect isearch
           ;; ("M-s L" . consult-line-multi)            ;; needed by consult-line to detect isearch

           ;; Minibuffer history
           :map minibuffer-local-map
           ("M-s" . consult-history)                 ;; orig. next-matching-history-element
           ;; ("M-r" . consult-history)                ;; orig. previous-matching-history-element
           )

    ;; Enable automatic preview at point in the *Completions* buffer. This is
    ;; relevant when you use the default completion UI.
    :hook (completion-list-mode . consult-preview-at-point-mode)

    ;; The :init configuration is always executed (Not lazy)
    :init

    ;; Tweak the register preview for `consult-register-load',
    ;; `consult-register-store' and the built-in commands.  This improves the
    ;; register formatting, adds thin separator lines, register sorting and hides
    ;; the window mode line.
    (advice-add #'register-preview :override #'consult-register-window)
    (setq register-preview-delay 0.5)

    ;; Use Consult to select xref locations with preview
    (setq xref-show-xrefs-function #'consult-xref
          xref-show-definitions-function #'consult-xref)

    ;; Configure other variables and modes in the :config section,
    ;; after lazily loading the package.
    :config

    ;; Optionally configure preview. The default value
    ;; is 'any, such that any key triggers the preview.
    ;; (setq consult-preview-key 'any)
    ;; (setq consult-preview-key "M-.")
    ;; (setq consult-preview-key '("S-<down>" "S-<up>"))
    ;; For some commands and buffer sources it is useful to configure the
    ;; :preview-key on a per-command basis using the `consult-customize' macro.
    (consult-customize
     consult-theme :preview-key '(:debounce 0.2 any)
     consult-ripgrep consult-git-grep consult-grep consult-man
     consult-bookmark consult-recent-file consult-xref
     consult--source-bookmark consult--source-file-register
     consult--source-recent-file consult--source-project-recent-file
     ;; :preview-key "M-."
     :preview-key '(:debounce 0.4 any))

    ;; Optionally configure the narrowing key.
    ;; Both < and C-+ work reasonably well.
    (setq consult-narrow-key "<") ;; "C-+"

    ;; Optionally make narrowing help available in the minibuffer.
    ;; You may want to use `embark-prefix-help-command' or which-key instead.
    ;; (keymap-set consult-narrow-map (concat consult-narrow-key " ?") #'consult-narrow-help)
  )

  (use-package consult-eglot)
  ;; (package-install 'consult-eglot-embark)
  ;; (with-eval-after-load 'embark
  ;;   (with-eval-after-load 'consult-eglot
  ;;     (require 'consult-eglot-embark)
  ;;     (consult-eglot-embark-mode)))

  ;; Advanced and handy completion style
  (use-package orderless
    :ensure t
    :custom
    (completion-styles '(orderless basic))
    (completion-category-overrides '((file (styles basic partial-completion)))))

  ;; Enable rich annotations using the Marginalia package
  (use-package marginalia
    ;; Bind `marginalia-cycle' locally in the minibuffer.  To make the binding
    ;; available in the *Completions* buffer, add it to the
    ;; `completion-list-mode-map'.
    :bind (:map minibuffer-local-map
           ("M-A" . marginalia-cycle))

    ;; The :init section is always executed.
    :init

    ;; Marginalia must be activated in the :init section of use-package such that
    ;; the mode gets enabled right away. Note that this forces loading the
    ;; package.
    (marginalia-mode))

  (use-package vertico
    ;; :custom
    ;; (vertico-scroll-margin 0) ;; Different scroll margin
    ;; (vertico-count 20) ;; Show more candidates
    ;; (vertico-resize t) ;; Grow and shrink the Vertico minibuffer
    ;; (vertico-cycle t) ;; Enable cycling for `vertico-next/previous'
    :init
    (vertico-mode))

  (use-package vertico-repeat
    :ensure nil
    :hook (minibuffer-setup . vertico-repeat-save))

  (use-package corfu
    ;; Optional customizations
    ;; :custom
    ;; (corfu-cycle t)                ;; Enable cycling for `corfu-next/previous'
    ;; (corfu-quit-at-boundary nil)   ;; Never quit at completion boundary
    ;; (corfu-quit-no-match nil)      ;; Never quit, even if there is no match
    ;; (corfu-preview-current nil)    ;; Disable current candidate preview
    ;; (corfu-preselect 'prompt)      ;; Preselect the prompt
    ;; (corfu-on-exact-match nil)     ;; Configure handling of exact matches

    ;; Enable Corfu only for certain modes. See also `global-corfu-modes'.
    ;; :hook ((prog-mode . corfu-mode)
    ;;        (shell-mode . corfu-mode)
    ;;        (eshell-mode . corfu-mode))

    :init

    ;; Recommended: Enable Corfu globally.  Recommended since many modes provide
    ;; Capfs and Dabbrev can be used globally (M-/).  See also the customization
    ;; variable `global-corfu-modes' to exclude certain modes.
    (global-corfu-mode)

    ;; Enable optional extension modes:
    ;; (corfu-history-mode)
    ;; (corfu-popupinfo-mode)
    )
#+END_SRC
- [ ] https://github.com/alexmurray/ivy-xref/
*** Minibuffer
#+BEGIN_SRC emacs-lisp
  (use-package savehist
    :init
    (savehist-mode))

#+END_SRC
**** TODO Learn amout minibuffer features, and configuration
#+BEGIN_SRC emacs-lisp
  ;;; TODO: Learn about the minibuffer setup.
  ;;;       Source: https://github.com/minad/vertico?tab=readme-ov-file#configuration.
  ;; Emacs minibuffer configurations.
  ;; (use-package emacs
  ;;   :custom
  ;;   ;; Support opening new minibuffers from inside existing minibuffers.
  ;;   (enable-recursive-minibuffers t)
  ;;   ;; Hide commands in M-x which do not work in the current mode.  Vertico
  ;;   ;; commands are hidden in normal buffers. This setting is useful beyond
  ;;   ;; Vertico.
  ;;   (read-extended-command-predicate #'command-completion-default-include-p)
  ;;   ;; Do not allow the cursor in the minibuffer prompt
  ;;   (minibuffer-prompt-properties
  ;;    '(read-only t cursor-intangible t face minibuffer-prompt)))
#+END_SRC
** Programming
*** Formatting
#+BEGIN_SRC emacs-lisp
  ;; An alternative package: https://github.com/lassik/emacs-format-all-the-code
  (use-package apheleia
    :config
    (setf (alist-get 'isort apheleia-formatters)
          '("isort" "--stdout" "-")
          (alist-get 'python-mode apheleia-mode-alist)
          '(isort black)
          apheleia-formatters-respect-indent-level nil)
    (apheleia-global-mode 1))
#+END_SRC
*** Flycheck
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :config (global-flycheck-mode))
#+END_SRC
*** LSP
#+BEGIN_SRC emacs-lisp
  ;; TODO: try (use-package eglot)
  ;; TODO: lsp-mode overrides flycheck checkers by default so no next checker is set
  ;;       after ls. Wich is kinda annoying for python for instance.
  (use-package lsp-mode
    :init
    (setf lsp-keymap-prefix "C-c l")
    (when (eq system-type 'darwin)
      (setf lsp-clients-typescript-npm-location "/opt/homebrew/bin/npm"))
    :hook (((typescript-mode js-mode) . lsp-deferred)
           ((clojure-mode-hook
             clojurescript-mode-hook
             clojurec-mode-hook) . lsp-deferred)
           ;; (python-mode . lsp-deferred)
           ;; which-key integration
           (lsp-mode . lsp-enable-which-key-integration))
    :commands (lsp lsp-deferred))
  (use-package lsp-ui)
  (use-package lsp-ivy)
#+END_SRC
*** Languages
**** Python
#+BEGIN_SRC emacs-lisp
  (use-package pyvenv)
#+END_SRC
**** Typescript
#+BEGIN_SRC emacs-lisp
  (use-package typescript-mode
    :mode "\\.tsx?\\'")
#+END_SRC
**** Web
#+BEGIN_SRC emacs-lisp
  (use-package web-mode
    :mode (("\\.html?\\'" . web-mode)
           ;;  ("\\.phtml\\'" . web-mode)
           ;; ("\\.tpl\\.php\\'" . web-mode)
           ;; ("\\.[agj]sp\\'" . web-mode)
           ;; ("\\.as[cp]x\\'" . web-mode)
           ;; ("\\.erb\\'" . web-mode)
           ;; ("\\.mustache\\'" . web-mode)
           ;; ("\\.djhtml\\'" . web-mode)
           )
    :custom
    (web-mode-code-indent-offset 2)
    (web-mode-css-indent-offset 2)
    (web-mode-markup-indent-offset 2)
    (web-mode-sql-indent-offset 2))


  (use-package pug-mode
    :mode "\\.pug$")
#+END_SRC
**** Clojure
- [ ] TODO: format on save.
#+BEGIN_SRC emacs-lisp
  (use-package clojure-mode)
  (use-package cider)
#+END_SRC
**** Yaml
#+BEGIN_SRC emacs-lisp
  (use-package yaml-mode
    :config
    (add-hook 'yaml-mode-hook
              '(lambda ()
                 (define-key yaml-mode-map "\C-m" 'newline-and-indent)))
    :mode "\\.ya?ml\\'")
#+END_SRC
**** HashiCorp HCLTerraform
#+BEGIN_SRC emacs-lisp
  (use-package hcl-mode)
  (use-package terraform-mode)
#+END_SRC
*** VCS
#+BEGIN_SRC emacs-lisp
  (use-package vc-fossil
    ;; Keep from loading unnecessarily at startup.
    :defer t
    ;; This allows VC to load vc-fossil when needed.
    :init (add-to-list 'vc-handled-backends 'Fossil t))

  (use-package magit
    :config
    (with-eval-after-load 'project
      ;; Make [m] magit available when switching projects.
      (require 'magit-extras)))
#+END_SRC
*** Docker
#+BEGIN_SRC emacs-lisp
  (use-package docker
    :bind ("C-c d" . docker))
  (use-package dockerfile-mode
    :defer t)

#+END_SRC
** Editing
#+BEGIN_SRC emacs-lisp
  ;; (use-package paredit)
  (use-package smartparens-mode
    :ensure smartparens  ;; install the package
    :hook (prog-mode text-mode markdown-mode) ;; add `smartparens-mode` to these hooks
    :config
    ;; load default config
    (require 'smartparens-config))
#+END_SRC
** Evil
- [ ] prevent evil from kicking in in repls.
#+BEGIN_SRC emacs-lisp
  (use-package evil
    :init
    (setf evil-split-window-below t
          evil-vsplit-window-right t
          evil-want-C-u-scroll t
          evil-want-keybinding nil
          evil-undo-system 'undo-redo)
    :config
    (evil-mode 1))

  (use-package evil-collection
    :after evil
    :config
    (evil-collection-init))
#+END_SRC

** Keys
;; Key bindings layout ideas:
;; --------
;; Search:
;;  <prefix> j g . git grep
;;  <prefix> j r . rg
;;  <prefix> j a . ag
;;  occur
;;  multi-occur
;;
;; --------
;; Toggle:
;;  writeroom
;;  flycheck
;;  zoom
;;  evil
;;  whitespace
;;  lsp/eglot?
;;  TreeMacs
;;
;; --------
;; Moving
;;  paragraphs
;;  s-exp
;;  functions
;;
;; --------
;; Jumps
;;  definition
;;  search for a symbol by name
;;  bookmark?
;;
;; --------
;; C-` Jump to terminal and back to the buffer (create term if not exists)

*** Bindings
#+BEGIN_SRC emacs-lisp
  (unbind-key "C-z" global-map)

  (defvar custom-keymap (make-sparse-keymap))
  (require 'bind-key) ;; bind-key is a part of use-package.

  (bind-keys :map custom-keymap
             ("t w" . writeroom-mode)
             ("t W" . whitespace-mode)
             ("t c" . flycheck-mode)
             ("t F" . toggle-frame-fullscreen)
             ("t z" . zoom-mode)
             ("M-r" . vertico-repeat)
             ("s-r" . vertico-repeat))

  (bind-key "s-p" custom-keymap)
  (bind-key "M-p" custom-keymap)
#+END_SRC
*** Stats
#+BEGIN_SRC emacs-lisp
  (use-package keyfreq
    :config
    (keyfreq-mode 1)
    (keyfreq-autosave-mode 1))
#+END_SRC

** Misc settings
#+BEGIN_SRC emacs-lisp
  ;; Enable commands useful commands.
  (put 'erase-buffer 'disabled nil)
#+END_SRC
** Dired
#+BEGIN_SRC elisp
  (require 'sort)
  (require 'dired)


  (defun my/sort-directory-first (reverse beg end)
    (interactive "P\nr")
    (save-excursion
      (save-restriction
        (narrow-to-region beg end)
        (goto-char (point-min))
        (sort-subr nil
                   'forward-line
                   'end-of-line
                   ;; We're interested in the first letter of the record, if it's ?d,
                   ;; we're looking at a directory.
                   (lambda ()
                     (skip-chars-forward "[:space:]")
                     (char-after))
                   ;; ENDKEYFUNC is not needed for STARTKEYFUNC returns a non-nil value.
                   nil
                   ;; Sort a before b if a is directory and b is not.
                   (lambda (a b)
                     (and
                      (eql a ?d)
                      (not (eql b ?d))))))))

  (defun my/dired-directory-first-hook ()
    (save-excursion
      (goto-char (point-min))
      (let ((inhibit-read-only t)
            donep)
        (while (not donep)
          (my/sort-directory-first nil
                                   (progn (forward-line)  ;; Skip the header.
                                          (point))
                                   (progn (forward-paragraph)
                                          (point)))
          (let ((next-subdir-point (dired-next-subdir 1 t t)))
            (setf donep (or
                         ;; No more subdirs.
                         (not next-subdir-point)
                         ;; A new subdir was added, and we're narrowed to its scope.
                         ;; This guards us from entering and infinite loop where dired-next-subdir
                         ;; returns non-nil, but we can't advance point.
                         (eql next-subdir-point (point-max))))))
        (set-buffer-modified-p nil))))

  (defun my/toggle-dired-directory-first (&optional on?off?switch)
    (interactive "P")
    (let ((on (lambda ()
                (add-hook 'dired-after-readin-hook
                          'my/dired-directory-first-hook)
                (message "Dired order directories first ON")))
          (off (lambda ()
                 (remove-hook 'dired-after-readin-hook
                              'my/dired-directory-first-hook)
                 (message "Dired order directories first OFF"))))
      (if (null on?off?switch)
          (if (memq 'my/dired-directory-first-hook
                    dired-after-readin-hook)
              (funcall off)
            (funcall on))
        (if (< (prefix-numeric-value on?off?switch) 0)
            (funcall off)
          (funcall on)))
      (when (eq major-mode 'dired-mode)
        (revert-buffer))))


  (my/toggle-dired-directory-first 1)

#+END_SRC

* Maybe/Try [0/3]
- [ ] TODO: (desktop-save-mode 1)
- [ ] TODO: C-p p b (switch project and buffer)
- [-] Wanted packages/features: [2/15]
  - [ ] tree-sitter
  - [ ] vterm
  - [ ] no-littering
  - [ ] straight.el
  - [X] embark
  - [ ] Rename both file and buffer
  - [ ] multiple-cursors
  - [ ] mode-line?
  - [ ] window-management
  - [ ] hydra?
  - [ ] grow/shrink regions?
  - [ ] ace-jump ace-* ?
  - [X] smartparent
  - [ ] expand-region
  - [ ] copany-mode
