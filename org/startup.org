* Look and Feel
#+begin_src emacs-lisp
  ;;(global-linum-mode)
#+end_src
**  WriteRoomMode
#+begin_src emacs-lisp
  (setf writeroom-width 100
        writeroom-mode-line t
        writeroom-major-modes '("c\\(\\+\\+\\)?-mode"
                                lisp-mode emacs-lisp-mode
                                clojure-mode
                                text-mode python-mode org-mode
                                cmake-mode
                                "js2-.*"
                                "magit-.*-mode")
        writeroom-major-modes-exceptions '(magit-popup-mode magit-log-mode))
  (global-writeroom-mode 1)
  (global-set-key (kbd "C-c w") 'writeroom-mode)
#+end_src
** Disable useless controls
#+begin_src emacs-lisp
  (setq inhibit-startup-screen t)
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
#+end_src

** Theme
#+begin_src emacs-lisp
  ;; (load-theme 'monokai t)
  ;; (load-theme 'solarized-dark t)
  (load-theme 'solarized-light t)
#+end_src

** mod-line
#+begin_src emacs-lisp
  ;; remove stupid box and line
  (set-face-attribute 'mode-line nil
                      :overline  'nil
                      :underline 'nil
                      :box nil)

  (set-face-attribute 'mode-line-inactive nil
                      :overline  'nil
                      :underline 'nil
                      :box nil)  (setq make-backup-files nil)

  (column-number-mode)
#+end_src

** NeoTree
#+begin_src emacs-lisp
  (global-set-key (kbd "C-c n") 'neotree-toggle)
  (setf neo-smart-open t)
#+end_src
** Display time
#+begin_src emacs-lisp
  (display-time-mode t)
#+end_src
** Zoom
#+begin_src emacs-lisp
  (zoom-mode t)
  (setf zoom-size '(0.618 . 0.618))
#+end_src
** Highlight matching paren
#+begin_src emacs-lisp
  (show-paren-mode 1)
#+end_src
** Rainbow-delimiters
#+begin_src emacs-lisp
  (add-hook 'prog-mode-hook #'rainbow-delimiters-mode)
#+end_src
* TODO Make a separate entry for interface things like neo-tree and shell-pop
* Disable stupid beeping
#+begin_src emacs-lisp
  (setq ring-bell-function 'ignore)
#+end_src

* Auto-Complete
#+begin_src emacs-lisp
  (ac-config-default) ;; setup auto-complete
#+end_src

* cc-mode Settings
#+begin_src emacs-lisp
  (add-to-list 'auto-mode-alist
               '("\\.h\\'" . c++-mode))  ; C++-mode for .h files

  (require 'google-c-style)
  (require 'my-favorite-c++-style)
  (require 'metrika-c++-style)
  (require 'mapsme-c-style)
  (add-hook 'c-mode-common-hook 'mapsme-set-c-style)
#+end_src

** TODO Make CC-mode settings separate .org file.

* js2-mode
#+begin_src emacs-lisp
  (add-to-list 'auto-mode-alist '("\\.js\\'" . js2-mode))
  (add-to-list 'auto-mode-alist '("\\.jsx\\'" . js2-jsx-mode))
  (add-to-list 'interpreter-mode-alist '("node" . js2-jsx-mode))

  (setf js2-basic-offset 2)
#+end_src
* json-mode
#+begin_src emacs-lisp
  (setf json-reformat:indent-width 2
        js-indent-level 2)
#+end_src
* Keyboard layout
#+begin_src emacs-lisp
  (setq default-input-method "russian-computer")
#+end_src

* Tune tabs alignment
#+begin_src emacs-lisp
  (setq tab-stop-list (number-sequence 4 200 4))
  (setq-default indent-tabs-mode nil)
#+end_src

* Remove trailing whitespaces before save.
#+begin_src emacs-lisp
  (add-hook 'before-save-hook 'delete-trailing-whitespace)
#+end_src

* Autosaves and backups
#+begin_src emacs-lisp
  ;; No backups!
  (setq make-backup-files nil)

  ;; Mo #Deamned-auto-save-trash#
  (setq auto-save-default nil)
#+end_src

* Bindings
** Disable C-x C-c
#+begin_src emacs-lisp
  (global-unset-key (kbd "C-x C-c"))
#+end_src
** Don't ever use arrows!!!
#+begin_src emacs-lisp
   (global-unset-key (kbd "<left>"))
   (global-unset-key (kbd "<right>"))
   (global-unset-key (kbd "<up>"))
   (global-unset-key (kbd "<down>"))
   (global-unset-key (kbd "<C-left>"))
   (global-unset-key (kbd "<C-right>"))
   (global-unset-key (kbd "<C-up>"))
   (global-unset-key (kbd "<C-down>"))
   (global-unset-key (kbd "<M-left>"))
   (global-unset-key (kbd "<M-right>"))
   (global-unset-key (kbd "<M-up>"))
   (global-unset-key (kbd "<M-down>"))
#+end_src

** Nice window switching
#+begin_src emacs-lisp
   (global-set-key [s-left] 'windmove-left)
   (global-set-key [s-right] 'windmove-right)
   (global-set-key [s-up] 'windmove-up)
   (global-set-key [s-down] 'windmove-down)
#+end_src

** Useful key bindings
#+begin_src emacs-lisp
  (global-set-key (kbd "<f5>") 'compile)
  (move-text-default-bindings) ;; move text up'n down
  (global-set-key (kbd "C-<f5>") 'tramp-cleanup-all-connections) ;; wake up after server came back
  (global-set-key (kbd "C-<f6>") 'tramp-cleanup-all-buffers) ;; and also kill all tramp buffers
  (global-set-key (kbd "C-c i b") 'ibuffer)
#+end_src

* Multiple Cursors
#+begin_src emacs-lisp
  (require 'multiple-cursors)

  (global-set-key (kbd "C-;") 'mc/edit-lines)

  (global-set-key (kbd "C->") 'mc/mark-next-like-this)
  (global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
  (global-set-key (kbd "C-c C->") 'mc/mark-all-like-this)
#+end_src

* Use long names instead of <N>s.
** TODO Disable for emacs 24.5 and highre.
#+begin_src emacs-lisp
  (require 'uniquify)
  (setq uniquify-buffer-name-style 'forward)
#+end_src

* Enable commands
#+begin_src emacs-lisp
  (put 'downcase-region 'disabled nil)
  (put 'upcase-region 'disabled nil)
#+end_src

* Custom functions
** Shortcuts for exiting
#+begin_src emacs-lisp
  (defun exit-emacs ()
    (interactive)
    (save-buffers-kill-terminal))
#+end_src
** Revert all buffers
#+begin_src emacs-lisp
  (defun revert-all-buffers ()
    "Refreshes all open buffers from their respective files."
    (interactive)
    (dolist (buf (buffer-list))
      (with-current-buffer buf
        (when (and (buffer-file-name)
                   (file-exists-p (buffer-file-name))
                   (not (buffer-modified-p)))
          (revert-buffer t t t))))
    (message "Refreshed open files."))
#+end_src

** Smart home
#+begin_src emacs-lisp
     (defun My-smart-home () "Odd home to beginning of line, even home to beginning of text/code."
    (interactive)
    (if (and (eq last-command 'My-smart-home)
             (/= (line-beginning-position) (point)))
        (beginning-of-line)
      (beginning-of-line-text)))

  (global-set-key [home] 'My-smart-home)
#+end_src

** New empty buffer
#+begin_src emacs-lisp
  (defun my::new-buffer ()
    "Create new empty buffer"
    (interactive)
    (set-window-buffer (selected-window)
                       (let* ((next-name (generate-new-buffer-name "*untitled*"))
                              (users-buffer-name (read-string
                                                  (format "Buffer name (default %s): " next-name)
                                                  nil nil next-name)))
                         (generate-new-buffer users-buffer-name))))
#+end_src
*** TODO Make new buffer inherit projectile mode too
** Rename both file and buffer
#+begin_src emacs-lisp
  (defun rename-this-buffer-and-file ()
    "Renames current buffer and file it is visiting."
    (interactive)
    (let ((name (buffer-name))
          (filename (buffer-file-name)))
      (if (not (and filename (file-exists-p filename)))
          (error "Buffer '%s' is not visiting a file!" name)
        (let ((new-name (read-file-name "New name: " filename)))
          (cond ((get-buffer new-name)
                 (error "A buffer named '%s' already exists!" new-name))
                (t
                 (rename-file filename new-name 1)
                 (set-visited-file-name new-name)
                 (set-buffer-modified-p nil)
                 (message "File '%s' successfully renamed to '%s'"
                          name (file-name-nondirectory new-name))))))))


  (defun rename-file-and-buffer ()
    "Rename the current buffer and file it is visiting."
    (interactive)
    (let ((filename (buffer-file-name)))
      (if (not (and filename (file-exists-p filename)))
          (message "Buffer is not visiting a file!")
        (let ((new-name (read-file-name "New name: " filename)))
          (cond
           ((vc-backend filename) (vc-rename-file filename new-name))
           (t
            (rename-file filename new-name t)
            (set-visited-file-name new-name t t)))))))
#+end_src
* Cider
;; Setup cider, a repl mode for clojure, and more
;; (add-hook 'cider-mode-hook 'cider-turn-on-eldoc-mode)
;; (setq nrepl-hide-special-buffers t) ;; hiding special buffers
;; (etq cider-repl-tab-command 'indent-for-tab-command) ;; tab key behaviour in repl
* Fix input echoing in python
#+begin_src emacs-lisp
  (add-hook 'inferior-python-mode-hook
            (lambda () (setf comint-process-echoes t)))
#+end_src
* Setup env
Setup env as so like emacs was started from a command line.
#+begin_src emacs-lisp
  (when (memq window-system '(mac ns))
    (exec-path-from-shell-initialize))
#+end_src
* SLIME
#+begin_src emacs-lisp
  (setf slime-contribs '(slime-repl))
  (setf slime-lisp-implementations
        '((sbcl ("sbcl"))))
#+end_src
* Helm: The only way of doing things!
#+begin_src emacs-lisp
  (require 'helm-config)
  (helm-mode 1)
  (define-key global-map [remap find-file] 'helm-find-files)
  (define-key global-map [remap occur] 'helm-occur)
  (define-key global-map [remap list-buffers] 'helm-buffers-list)
  (define-key global-map [remap dabbrev-expand] 'helm-dabbrev)
  (global-set-key (kbd "M-x") 'helm-M-x)
  (global-set-key (kbd "C-x b") 'helm-mini)
  (global-set-key (kbd "M-y") 'helm-show-kill-ring)
  (unless (boundp 'completion-in-region-function)
    (define-key lisp-interaction-mode-map [remap completion-at-point] 'helm-lisp-completion-at-point)
    (define-key emacs-lisp-mode-map       [remap completion-at-point] 'helm-lisp-completion-at-point))

  (setq
  ;; helm-split-window-in-side-p           t ; open helm buffer inside current window, not occupy whole other window
   helm-buffers-fuzzy-matching           t ; fuzzy matching buffer names when non--nil
   helm-move-to-line-cycle-in-source     t ; move to end or beginning of source when reaching top or bottom of source.
   helm-ff-search-library-in-sexp        t ; search for library in `require' and `declare-function' sexp.
   helm-scroll-amount                    8 ; scroll 8 lines other window using M-<next>/M-<prior>
   helm-ff-file-name-history-use-recentf t)
#+end_src

* TODO [0/1] Projectile (Navigete easelly inside project: .gin, .svn, ...)
  - [ ] Whould it better to make this a child of a Helm entry?
#+begin_src emacs-lisp
  (setq projectile-enable-caching t)
  (projectile-global-mode)
  (setq projectile-completion-system 'helm)
  (helm-projectile-on)
  (setf projectile-use-git-grep t)
#+end_src
* Ace
#+begin_src emacs-lisp
  (global-set-key (kbd "C-c j") 'ace-jump-mode)
  ;; Override default C-x o behavior.
  (global-set-key (kbd "C-x o") 'ace-window)
  (setf aw-dispatch-always nil)
#+end_src
* Customize Meta and Control Keys
#+begin_src emacs-lisp
  (when (eq system-type 'darwin)
    (setq mac-option-modifier 'control)
    (setq mac-command-modifier 'meta))
#+end_src

* org-mode
** Variables
#+begin_src emacs-lisp
  (setq org-default-notes-file (concat org-directory "/notes.org"))
#+end_src
** Bindings
#+begin_src emacs-lisp
  (global-set-key (kbd "C-c a") 'org-agenda)
  (global-set-key (kbd "C-c c") 'org-capture)
  ;(global-set-key (kdb "C-c l") 'org-store-link)
  ;(global-set-key (kdb "C-c b") 'org-iswitchb)
#+end_src
** List of additional LaTeX packages
#+begin_src emacs-lisp
  (if (version< (org-version) "8")
      (progn
        (require 'org-latex)
        (setq org-export-latex-listings t)
        (add-to-list 'org-export-latex-packages-alist '("" "cmap" t))
        (add-to-list 'org-export-latex-packages-alist '("english,russian" "babel" t)))
    (progn
      (require 'ox-latex)
      (setq org-latex-listings t)
      (add-to-list 'org-latex-packages-alist '("" "cmap" t))
      (add-to-list 'org-latex-packages-alist '("english,russian" "babel"))))
#+end_src
** org-habit
#+begin_src emacs-lisp
  (add-to-list 'org-modules 'org-habit)
  (require 'org-habit)
#+end_src
* TODO Modal editing
  - ryo
  - modalka
  - evil
  - hydra
* Other users' configs
  https://github.com/mrkkrp/dot-emacs
  http://pages.sachachua.com/.emacs.d/Sacha.html#org0477c97
* Clang-Fomat
#+begin_src emacs-lisp
  (require 'clang-format)
  (global-set-key [C-tab] 'clang-format-region)
#+end_src
